---
// const stepRead = typeof window !== 'undefined' ? localStorage.getItem(`read-${step.slug.current}`) === 'true' : false;

/* function handleCheckboxChange() {
  localStorage.setItem(`read-${step.slug.current}`, !stepRead);
  window.location.reload();  // Reload to reflect changes
} */

import type { InferGetStaticParamsType } from "astro";
import { PortableText } from "astro-portabletext";
import Layout from "../../layouts/Layout.astro";
// import { formatDate } from "../../utils";
import { getLearningStep, getLearningSteps } from "../../utils/sanity";
// import { Icon } from "astro-icon/components";

export async function getStaticPaths() {
  const steps = await getLearningSteps();
  return steps.map((step) => ({
    params: { slug: step.slug.current },
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
const { slug } = Astro.params as Params;

const step = await getLearningStep(slug);
---

<Layout title={step.title}>
  <section class="step">
    <div class="step__container">
      <h1 class="step__title">{step.title}</h1>
      
      <!-- <p class="step__date">
        {formatDate(step._createdAt)}
      </p> -->
      
      {step.videoUrl && (
        <div class="video-container">
          <iframe
            src={step.videoUrl}
            
            allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen
            class="video-iframe"
          ></iframe>
        </div>
      )}

      <div class="step__content">
        <PortableText value={step.content} />
      </div>

      {step.nextStep && (
        <a href={`/learn/${step.nextStep.slug}`} class="next-step-button">
          Next Step: {step.nextStep.title}
        </a>
      )}

      {step.resources && step.resources.length > 0 && (
        <div class="related-resources">
          <h3>Related Resources</h3>
          <ul>
            {step.resources.map(resource => (
              <li data-key={resource._id}>
                <a href={`/resource/${resource.slug.current}`}>
                  {resource.title}
                </a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  </section>
  <div>
  <!--   <h1>{step.title}</h1>
    <input type="checkbox" id="readCheckbox" checked={stepRead} on:change={handleCheckboxChange} />


    <label for="readCheckbox">Mark as read</label>
  </div>
  <script>
    function handleCheckboxChange() {
      const checkbox = document.getElementById('readCheckbox');
      const readState = checkbox.checked;
      localStorage.setItem(`read-${window.location.pathname}`, readState ? 'true' : 'false');
    }
    
    document.addEventListener('DOMContentLoaded', () => {
      const readState = localStorage.getItem(`read-${window.location.pathname}`) === 'true';
      const checkbox = document.getElementById('readCheckbox');
      checkbox.checked = readState;
    });
  </script> -->
</Layout>


  


<style>
  .step {
    width: 100%;
    margin: var(--space-1) 0 var(--space-4);

    & .step__container {
      padding: 0 var(--space-3);
    }

    & .step__title {
      font-family: var(--font-family-sans);
      font-size: var(--font-size-7);
      line-height: var(--line-height-6);
      margin: var(--space-4) 0;
      font-weight: 800;
    }

    & .step__date {
      font-family: var(--font-family-sans);
      font-weight: 600;
      font-size: var(--font-size-1);
      line-height: var(--line-height-1);
      margin-top: var(--space-4);
    }

    & .step__content {
      font-family: var(--font-family-serif);
      font-weight: 400;
      font-size: var(--font-size-4);
      line-height: var(--line-height-5);
      margin-top: var(--space-6);

      & blockquote {
        border-left: 5px solid var(--black);
        padding-left: var(--space-3);
        margin-left: var(--space-4);
      }

      & a {
        color: var(--blue-600);
        text-decoration: none;
      }
    }

    & .video-container {
      margin: var(--space-4) 0;
      & .video-iframe {
        width: 100%;
        height: 300px;
      }
    }

    & .next-step-button {
      display: block;
      background-color: var(--blue-600);
      color: white;
      text-align: center;
      padding: var(--space-2) var(--space-4);
      margin-top: var(--space-4);
      border-radius: var(--radius-1);
      text-decoration: none;
    }

    & .related-resources {
      margin-top: var(--space-5);
      & h3 {
        font-size: var(--font-size-3);
      }
      & ul {
        list-style: none;
        padding: 0;
      }
      & li {
        margin-bottom: var(--space-1);
      }
    }
  }
</style>
